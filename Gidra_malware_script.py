import ctypes
import os
import winreg

# Define necessary ctypes
LPWSTR = ctypes.c_wchar_p
LPCWSTR = ctypes.c_wchar_p
LPVOID = ctypes.c_void_p
DWORD = ctypes.c_uint32
BOOL = ctypes.c_int


# Define STARTUPINFO and PROCESS_INFORMATION structures
class STARTUPINFO(ctypes.Structure):
    _fields_ = [
        ("cb", DWORD),
        ("lpReserved", LPWSTR),
        ("lpDesktop", LPWSTR),
        ("lpTitle", LPWSTR),
        ("dwX", DWORD),
        ("dwY", DWORD),
        ("dwXSize", DWORD),
        ("dwYSize", DWORD),
        ("dwXCountChars", DWORD),
        ("dwYCountChars", DWORD),
        ("dwFillAttribute", DWORD),
        ("dwFlags", DWORD),
        ("wShowWindow", ctypes.c_short),
        ("cbReserved2", ctypes.c_short),
        ("lpReserved2", ctypes.c_void_p),
        ("hStdInput", LPVOID),
        ("hStdOutput", LPVOID),
        ("hStdError", LPVOID),
    ]


class PROCESS_INFORMATION(ctypes.Structure):
    _fields_ = [
        ("hProcess", LPVOID),
        ("hThread", LPVOID),
        ("dwProcessId", DWORD),
        ("dwThreadId", DWORD),
    ]


def create_process():
    kernel32 = ctypes.windll.kernel32
    CreateProcessW = kernel32.CreateProcessW
    CreateProcessW.argtypes = [LPCWSTR, LPWSTR, LPVOID, LPVOID,
                               BOOL, DWORD, LPVOID, LPCWSTR,
                               ctypes.POINTER(STARTUPINFO), ctypes.POINTER(PROCESS_INFORMATION)]
    CreateProcessW.restype = BOOL

    # Initialize STARTUPINFO and PROCESS_INFORMATION structures
    si = STARTUPINFO()
    pi = PROCESS_INFORMATION()
    si.cb = ctypes.sizeof(si)
    command = "notepad.exe"

    # Call CreateProcessW
    success = CreateProcessW(None, command, None, None, False, 0, None, None,
                             ctypes.byref(si), ctypes.byref(pi))

    if success:
        print("Process created successfully.")
        kernel32.CloseHandle(pi.hProcess)
        kernel32.CloseHandle(pi.hThread)
    else:
        print("Failed to create process.")


def simulate_file_encryption():
    os.rename("sensitive_data.txt", "sensitive_data.txt.locked")


def modify_registry():
    reg_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
    reg_value_name = "MalwarePersistence"
    reg_value_data = r"C:\malware\malware.exe"

    try:
        # Open the registry key
        reg_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_path, 0, winreg.KEY_SET_VALUE)

        # Set the registry value
        winreg.SetValueEx(reg_key, reg_value_name, 0, winreg.REG_SZ, reg_value_data)

        # Close the key
        winreg.CloseKey(reg_key)

        print("Registry modified successfully.")
    except WindowsError as e:
        print(f"Failed to modify the registry: {e}")


def create_service():
    service_name = "MalwareService"
    # Simulate service creation (placeholder)
    print(f"Simulated creation of service: {service_name}")


def interact_with_dlls():
    # Explicitly load kernel32.dll and user32.dll
    kernel32 = ctypes.WinDLL('kernel32')
    user32 = ctypes.WinDLL('user32')

    # Call a function from each to ensure interaction
    kernel32.Beep(750, 300)  # Beep sound using kernel32.dll
    user32.MessageBoxW(0, "DLL Interaction Detected!", "Malware", 1)  # MessageBox using user32.dll


def main():
    with open("sensitive_data.txt", "w") as f:
        f.write("Sensitive data.")
    simulate_file_encryption()
    modify_registry()
    create_process()
    create_service()
    interact_with_dlls()


if __name__ == "__main__":
    main()
